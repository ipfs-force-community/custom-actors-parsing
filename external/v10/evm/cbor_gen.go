// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package evm

import (
	"fmt"
	"io"
	"math"
	"sort"

	cid "github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = math.E
var _ = sort.Sort

var lengthBufState = []byte{132}

func (t *State) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write(lengthBufState); err != nil {
		return err
	}

	// t.ByteCode (cid.Cid) (struct)

	if err := cbg.WriteCid(cw, t.ByteCode); err != nil {
		return xerrors.Errorf("failed to write cid field t.ByteCode: %w", err)
	}

	// t.ByteCodeHash (multihash.Multihash) (slice)
	if len(t.ByteCodeHash) > cbg.ByteArrayMaxLen {
		return xerrors.Errorf("Byte array in field t.ByteCodeHash was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajByteString, uint64(len(t.ByteCodeHash))); err != nil {
		return err
	}

	if _, err := cw.Write(t.ByteCodeHash[:]); err != nil {
		return err
	}

	// t.ContractState (cid.Cid) (struct)

	if err := cbg.WriteCid(cw, t.ContractState); err != nil {
		return xerrors.Errorf("failed to write cid field t.ContractState: %w", err)
	}

	// t.Nonce (uint64) (uint64)

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.Nonce)); err != nil {
		return err
	}

	return nil
}

func (t *State) UnmarshalCBOR(r io.Reader) (err error) {
	*t = State{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 4 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.ByteCode (cid.Cid) (struct)

	{

		c, err := cbg.ReadCid(cr)
		if err != nil {
			return xerrors.Errorf("failed to read cid field t.ByteCode: %w", err)
		}

		t.ByteCode = c

	}
	// t.ByteCodeHash (multihash.Multihash) (slice)

	maj, extra, err = cr.ReadHeader()
	if err != nil {
		return err
	}

	if extra > cbg.ByteArrayMaxLen {
		return fmt.Errorf("t.ByteCodeHash: byte array too large (%d)", extra)
	}
	if maj != cbg.MajByteString {
		return fmt.Errorf("expected byte array")
	}

	if extra > 0 {
		t.ByteCodeHash = make([]uint8, extra)
	}

	if _, err := io.ReadFull(cr, t.ByteCodeHash[:]); err != nil {
		return err
	}
	// t.ContractState (cid.Cid) (struct)

	{

		c, err := cbg.ReadCid(cr)
		if err != nil {
			return xerrors.Errorf("failed to read cid field t.ContractState: %w", err)
		}

		t.ContractState = c

	}
	// t.Nonce (uint64) (uint64)

	{

		maj, extra, err = cr.ReadHeader()
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.Nonce = uint64(extra)

	}
	return nil
}

var lengthBufConstructorParams = []byte{130}

func (t *ConstructorParams) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write(lengthBufConstructorParams); err != nil {
		return err
	}

	// t.Creator ([20]uint8) (array)
	if len(t.Creator) > cbg.ByteArrayMaxLen {
		return xerrors.Errorf("Byte array in field t.Creator was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajByteString, uint64(len(t.Creator))); err != nil {
		return err
	}

	if _, err := cw.Write(t.Creator[:]); err != nil {
		return err
	}

	// t.InitCode ([]uint8) (slice)
	if len(t.InitCode) > cbg.ByteArrayMaxLen {
		return xerrors.Errorf("Byte array in field t.InitCode was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajByteString, uint64(len(t.InitCode))); err != nil {
		return err
	}

	if _, err := cw.Write(t.InitCode[:]); err != nil {
		return err
	}
	return nil
}

func (t *ConstructorParams) UnmarshalCBOR(r io.Reader) (err error) {
	*t = ConstructorParams{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Creator ([20]uint8) (array)

	maj, extra, err = cr.ReadHeader()
	if err != nil {
		return err
	}

	if extra > cbg.ByteArrayMaxLen {
		return fmt.Errorf("t.Creator: byte array too large (%d)", extra)
	}
	if maj != cbg.MajByteString {
		return fmt.Errorf("expected byte array")
	}

	if extra != 20 {
		return fmt.Errorf("expected array to have 20 elements")
	}

	t.Creator = [20]uint8{}

	if _, err := io.ReadFull(cr, t.Creator[:]); err != nil {
		return err
	}
	// t.InitCode ([]uint8) (slice)

	maj, extra, err = cr.ReadHeader()
	if err != nil {
		return err
	}

	if extra > cbg.ByteArrayMaxLen {
		return fmt.Errorf("t.InitCode: byte array too large (%d)", extra)
	}
	if maj != cbg.MajByteString {
		return fmt.Errorf("expected byte array")
	}

	if extra > 0 {
		t.InitCode = make([]uint8, extra)
	}

	if _, err := io.ReadFull(cr, t.InitCode[:]); err != nil {
		return err
	}
	return nil
}

var lengthBufGetStorageAtParams = []byte{129}

func (t *GetStorageAtParams) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write(lengthBufGetStorageAtParams); err != nil {
		return err
	}

	// t.StorageKey (uint256.Int) (array)
	if len(t.StorageKey) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.StorageKey was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajArray, uint64(len(t.StorageKey))); err != nil {
		return err
	}
	for _, v := range t.StorageKey {
		if err := cw.CborWriteHeader(cbg.MajUnsignedInt, uint64(v)); err != nil {
			return err
		}
	}
	return nil
}

func (t *GetStorageAtParams) UnmarshalCBOR(r io.Reader) (err error) {
	*t = GetStorageAtParams{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 1 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.StorageKey (uint256.Int) (array)

	maj, extra, err = cr.ReadHeader()
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.StorageKey: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra != 4 {
		return fmt.Errorf("expected array to have 4 elements")
	}

	t.StorageKey = [4]uint64{}

	for i := 0; i < int(extra); i++ {

		maj, val, err := cr.ReadHeader()
		if err != nil {
			return xerrors.Errorf("failed to read uint64 for t.StorageKey slice: %w", err)
		}

		if maj != cbg.MajUnsignedInt {
			return xerrors.Errorf("value read for array t.StorageKey was not a uint, instead got %d", maj)
		}

		t.StorageKey[i] = uint64(val)
	}

	return nil
}
